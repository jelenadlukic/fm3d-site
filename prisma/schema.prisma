// prisma/schema.prisma
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  SUPERADMIN
  STUDENT
  PARENT
}

/**
 * -------------------- USER & AUTH --------------------
 */

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(STUDENT)
  passwordHash  String?

  // Profil
  bio        String?
  avatarPath String?
  avatarUrl  String?

  // Relacije
  accounts    Account[]
  sessions    Session[]
  posts       Post[]
  works       Work[]         @relation("UserAuthorWorks") // ↔ Work.authorUser
  badgesGiven BadgeReview[]  @relation("BadgeGiver") // ↔ BadgeReview.giver
  journal     JournalEntry[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * -------------------- POST (Vesti) --------------------
 */

model Post {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  excerpt   String?
  content   String?
  coverUrl  String?
  coverPath String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String?
  author   User?   @relation(fields: [authorId], references: [id])
}

/**
 * -------------------- PARTICIPANT (direktorijum) --------------------
 */

enum ParticipantRole {
  STUDENT
  PARENT
  SUPERADMIN
}

model Participant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  role        ParticipantRole
  email       String?         @unique
  phone       String?
  bio         String?
  isActive    Boolean         @default(true)
  avatarPath  String?
  avatarUrl   String?
  schoolClass String?
  // NEMA relaciju na Work (radove potpisuje User)
}

/**
 * -------------------- WORK (Radovi) --------------------
 */

enum WorkMediaType {
  IMAGE
  VIDEO
  GLTF
  OTHER
}

model Work {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  slug        String  @unique
  excerpt     String?
  description String?
  published   Boolean @default(false)

  coverPath String?
  coverUrl  String?
  filePath  String?
  mediaType WorkMediaType @default(IMAGE)

  // Autor je USER (ne Participant) — dosledno sa User.works
  authorUserId String?
  authorUser   User?   @relation("UserAuthorWorks", fields: [authorUserId], references: [id])

  // Bedževi dobijeni na ovom radu
  badges BadgeReview[]
}

/**
 * -------------------- BADGES (peer kudos) --------------------
 */

enum Badge {
  INNOVATIVE // inovativno
  AESTHETIC // lepo / estetski skladno
  CRAFT // zanatska izvedba / tehnička preciznost
  TEAMWORK // timski rad / saradnja
  PROGRESS // napredak u odnosu na ranije
  HELPFUL // pomogao/la drugima
}

model BadgeReview {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  workId String
  work   Work   @relation(fields: [workId], references: [id])

  giverUserId String
  giver       User   @relation("BadgeGiver", fields: [giverUserId], references: [id])

  badge Badge
  note  String?

  @@unique([workId, giverUserId, badge]) // isti korisnik ne može isti bedž 2x istom radu
}

/**
 * -------------------- JOURNAL (Dnevnik prakse) --------------------
 */

model JournalEntry {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  date           DateTime
  text           String
  attachmentPath String?
  createdAt      DateTime @default(now())

  @@unique([userId, date]) // 1 unos po danu
}
